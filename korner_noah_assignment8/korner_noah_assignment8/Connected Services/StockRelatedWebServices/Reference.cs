//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace korner_noah_assignment8.StockRelatedWebServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StockRelatedWebServices.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTop10USIndices", ReplyAction="http://tempuri.org/IService1/GetTop10USIndicesResponse")]
        string GetTop10USIndices(string sourceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTop10USIndices", ReplyAction="http://tempuri.org/IService1/GetTop10USIndicesResponse")]
        System.Threading.Tasks.Task<string> GetTop10USIndicesAsync(string sourceURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockQuote", ReplyAction="http://tempuri.org/IService1/GetStockQuoteResponse")]
        decimal GetStockQuote(string stockSymbol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockQuote", ReplyAction="http://tempuri.org/IService1/GetStockQuoteResponse")]
        System.Threading.Tasks.Task<decimal> GetStockQuoteAsync(string stockSymbol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortIndicesLowHigh", ReplyAction="http://tempuri.org/IService1/SortIndicesLowHighResponse")]
        string SortIndicesLowHigh();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortIndicesLowHigh", ReplyAction="http://tempuri.org/IService1/SortIndicesLowHighResponse")]
        System.Threading.Tasks.Task<string> SortIndicesLowHighAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalcTransactionPrice", ReplyAction="http://tempuri.org/IService1/CalcTransactionPriceResponse")]
        decimal CalcTransactionPrice(string stockSymbol, int numShares);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalcTransactionPrice", ReplyAction="http://tempuri.org/IService1/CalcTransactionPriceResponse")]
        System.Threading.Tasks.Task<decimal> CalcTransactionPriceAsync(string stockSymbol, int numShares);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNumSharesWithDollarCostAvg", ReplyAction="http://tempuri.org/IService1/GetNumSharesWithDollarCostAvgResponse")]
        double GetNumSharesWithDollarCostAvg(string stockSymbol, decimal monthlyInvestment, int numYears);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNumSharesWithDollarCostAvg", ReplyAction="http://tempuri.org/IService1/GetNumSharesWithDollarCostAvgResponse")]
        System.Threading.Tasks.Task<double> GetNumSharesWithDollarCostAvgAsync(string stockSymbol, decimal monthlyInvestment, int numYears);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : korner_noah_assignment8.StockRelatedWebServices.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<korner_noah_assignment8.StockRelatedWebServices.IService1>, korner_noah_assignment8.StockRelatedWebServices.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTop10USIndices(string sourceURL) {
            return base.Channel.GetTop10USIndices(sourceURL);
        }
        
        public System.Threading.Tasks.Task<string> GetTop10USIndicesAsync(string sourceURL) {
            return base.Channel.GetTop10USIndicesAsync(sourceURL);
        }
        
        public decimal GetStockQuote(string stockSymbol) {
            return base.Channel.GetStockQuote(stockSymbol);
        }
        
        public System.Threading.Tasks.Task<decimal> GetStockQuoteAsync(string stockSymbol) {
            return base.Channel.GetStockQuoteAsync(stockSymbol);
        }
        
        public string SortIndicesLowHigh() {
            return base.Channel.SortIndicesLowHigh();
        }
        
        public System.Threading.Tasks.Task<string> SortIndicesLowHighAsync() {
            return base.Channel.SortIndicesLowHighAsync();
        }
        
        public decimal CalcTransactionPrice(string stockSymbol, int numShares) {
            return base.Channel.CalcTransactionPrice(stockSymbol, numShares);
        }
        
        public System.Threading.Tasks.Task<decimal> CalcTransactionPriceAsync(string stockSymbol, int numShares) {
            return base.Channel.CalcTransactionPriceAsync(stockSymbol, numShares);
        }
        
        public double GetNumSharesWithDollarCostAvg(string stockSymbol, decimal monthlyInvestment, int numYears) {
            return base.Channel.GetNumSharesWithDollarCostAvg(stockSymbol, monthlyInvestment, numYears);
        }
        
        public System.Threading.Tasks.Task<double> GetNumSharesWithDollarCostAvgAsync(string stockSymbol, decimal monthlyInvestment, int numYears) {
            return base.Channel.GetNumSharesWithDollarCostAvgAsync(stockSymbol, monthlyInvestment, numYears);
        }
    }
}
